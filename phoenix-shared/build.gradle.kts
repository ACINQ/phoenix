import java.io.ByteArrayOutputStream
import co.touchlab.skie.configuration.FlowInterop
import co.touchlab.skie.configuration.SuspendInterop
import org.jetbrains.kotlin.gradle.dsl.JvmTarget

plugins {
    kotlin("multiplatform")
    id("kotlinx-serialization")
    id("app.cash.sqldelight")
    if (System.getProperty("includeAndroid")?.toBoolean() == true) {
        id("com.android.library")
    }
    id("co.touchlab.skie") version libs.versions.skie.get()
}

val includeAndroid = System.getProperty("includeAndroid")?.toBoolean() ?: false

/** Get the current git commit hash. */
fun gitCommitHash(): String {
    val stream = ByteArrayOutputStream()
    project.exec {
        commandLine = "git rev-parse --verify --long HEAD".split(" ")
        standardOutput = stream
    }
    return String(stream.toByteArray()).split("\n").first()
}

/**
 * Generates a `BuildVersions` file in phoenix-shared/build/generated-src containing the current git commit and the lightning-kmp version.
 * See https://stackoverflow.com/a/74771876 for details.
 */
val buildVersionsTask by tasks.registering(Sync::class) {
    from(
        resources.text.fromString(
            """
            |package fr.acinq.phoenix.shared
            |
            |object BuildVersions {
            |    const val PHOENIX_COMMIT = "${gitCommitHash()}"
            |    const val LIGHTNING_KMP_VERSION = "${libs.versions.lightningkmp.get()}"
            |}
            |
            """.trimMargin()
        )
    ) {
        rename { "BuildVersions.kt" }
        into("fr/acinq/phoenix/shared")
    }
    into(layout.buildDirectory.dir("generated-src/kotlin/"))
}

kotlin {
    compilerOptions {
        freeCompilerArgs.add("-Xexpect-actual-classes")
    }

    if (includeAndroid) {
        androidTarget {
            compilerOptions {
                jvmTarget.set(JvmTarget.JVM_1_8)
            }
        }
    }

    listOf(iosX64(), iosArm64(), iosSimulatorArm64()).forEach {
        it.binaries {
            framework {
                baseName = "PhoenixShared"
            }
            configureEach {
                it.compilations.all {
                    freeCompilerArgs += "-Xoverride-konan-properties=osVersionMin.ios_x64=16.0;osVersionMin.ios_arm64=16.0"
                    // The notification-service-extension is limited to 24 MB of memory.
                    // With mimalloc we can easily hit the 24 MB limit, and the OS kills the process.
                    // But with standard allocation, we're using less then half the limit.
                    freeCompilerArgs += "-Xallocator=std"
                    freeCompilerArgs += listOf("-linker-options", "-application_extension")
                }
            }
        }
    }

    sourceSets {
        // -- common sources
        val commonMain by getting {
            // marks the dir generated by `buildVersionTask` as a source, and tells gradle to launch that task whenever the sources are compiled.
            kotlin.srcDir(buildVersionsTask.map { it.destinationDir })
            dependencies {
                // lightning-kmp
                api("fr.acinq.lightning:lightning-kmp-core:${libs.versions.lightningkmp.get()}")
                // ktor
                implementation("io.ktor:ktor-client-core:${libs.versions.ktor.get()}")
                implementation("io.ktor:ktor-client-json:${libs.versions.ktor.get()}")
                implementation("io.ktor:ktor-serialization-kotlinx-json:${libs.versions.ktor.get()}")
                implementation("io.ktor:ktor-client-content-negotiation:${libs.versions.ktor.get()}")
                // sqldelight
                implementation("app.cash.sqldelight:runtime:${libs.versions.sqldelight.get()}")
                implementation("app.cash.sqldelight:coroutines-extensions:${libs.versions.sqldelight.get()}")
                // SKEI
                implementation("co.touchlab.skie:configuration-annotations:${libs.versions.skie.get()}")
            }
        }

        val commonTest by getting {
            dependencies {
                implementation(kotlin("test-common"))
                implementation(kotlin("test-annotations-common"))
                implementation("io.ktor:ktor-client-mock:${libs.versions.ktor.get()}")
                implementation("com.squareup.okio:okio:${libs.versions.okio.get()}")
            }
        }

        // -- android sources
        if (includeAndroid) {
            val androidMain by getting {
                //noinspection UseTomlInstead
                dependencies {
                    implementation("fr.acinq.secp256k1:secp256k1-kmp-jni-android:${libs.versions.secp256k1.get()}")
                    implementation("io.ktor:ktor-network:${libs.versions.ktor.get()}")
                    implementation("io.ktor:ktor-network-tls:${libs.versions.ktor.get()}")
                    implementation("io.ktor:ktor-client-android:${libs.versions.ktor.get()}")
                    implementation("app.cash.sqldelight:android-driver:${libs.versions.sqldelight.get()}")
                }
            }
            val androidUnitTest by getting {
                dependencies {
                    implementation(kotlin("test-junit"))
                    implementation("androidx.test.ext:junit:${libs.versions.androidx.junit.get()}")
                    implementation("androidx.test.espresso:espresso-core:${libs.versions.espresso.get()}")
                    implementation("org.robolectric:robolectric:${libs.versions.robolectric.get()}")
                    val currentOs = org.gradle.internal.os.OperatingSystem.current()
                    val target = when {
                        currentOs.isLinux -> "linux"
                        currentOs.isMacOsX -> "darwin"
                        currentOs.isWindows -> "mingw"
                        else -> error("Unsupported OS $currentOs")
                    }
                    implementation("fr.acinq.secp256k1:secp256k1-kmp-jni-jvm-$target:${libs.versions.secp256k1.get()}")
                    implementation("app.cash.sqldelight:sqlite-driver:${libs.versions.sqldelight.get()}")
                }
            }
        }

        // -- ios sources
        val iosMain by creating {
            dependencies {
                implementation("io.ktor:ktor-client-ios:${libs.versions.ktor.get()}")
                implementation("app.cash.sqldelight:native-driver:${libs.versions.sqldelight.get()}")
            }
        }

        val iosTest by creating {
            dependencies {
                implementation("app.cash.sqldelight:native-driver:${libs.versions.sqldelight.get()}")
            }
        }

        all {
            languageSettings.optIn("kotlin.RequiresOptIn")
        }
    }
}

sqldelight {
    databases {
        create("ChannelsDatabase") {
            packageName.set("fr.acinq.phoenix.db.sqldelight")
            srcDirs.from("src/commonMain/sqldelight/channelsdb")
        }
        create("PaymentsDatabase") {
            packageName.set("fr.acinq.phoenix.db.sqldelight")
            srcDirs.from("src/commonMain/sqldelight/paymentsdb")
        }
        create("AppDatabase") {
            packageName.set("fr.acinq.phoenix.db.sqldelight")
            srcDirs.from("src/commonMain/sqldelight/appdb")
        }
    }
}

if (includeAndroid) {
    extensions.configure<com.android.build.gradle.LibraryExtension>("android") {
        namespace = "fr.acinq.phoenix.shared"
        compileSdk = 34
        defaultConfig {
            minSdk = 26
            testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        }

        lint {
            disable.add("Deprecation")
        }

        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_1_8
            targetCompatibility = JavaVersion.VERSION_1_8
        }

        testOptions {
            unitTests.isReturnDefaultValues = true
        }

        sourceSets["main"].manifest.srcFile("src/androidMain/AndroidManifest.xml")
    }
}

skie {
    analytics {
        disableUpload.set(true)
    }
    features {
        group {
            FlowInterop.Enabled(false)
            SuspendInterop.Enabled(false)
        }
    }
}
