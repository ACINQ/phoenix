import fr.acinq.phoenix.db.payments.OutgoingDetailsTypeVersion;
import fr.acinq.phoenix.db.payments.OutgoingStatusTypeVersion;
import fr.acinq.phoenix.db.payments.OutgoingPartStatusTypeVersion;

listAllPaymentsOrder:
SELECT
    combined_payments.type         AS type,
    combined_payments.id           AS id,
    combined_payments.created_at   AS created_at,
    combined_payments.completed_at AS completed_at,
    payments_metadata.modified_at  AS metadata_modified_at
FROM (
    SELECT
        2            AS type,
        id           AS id,
        created_at   AS created_at,
        completed_at AS completed_at
    FROM outgoing_payments
UNION ALL
    SELECT
        3            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM splice_outgoing_payments
UNION ALL
    SELECT
        4            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM channel_close_outgoing_payments
UNION ALL
    SELECT
        5            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM splice_cpfp_outgoing_payments
UNION ALL
    SELECT
        6            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at    AS completed_at
    FROM inbound_liquidity_outgoing_payments
UNION ALL
    SELECT
        1                        AS type,
        lower(hex(payment_hash)) AS id,
        created_at               AS created_at,
        received_at              AS completed_at
    FROM incoming_payments
    WHERE incoming_payments.received_at IS NOT NULL
    AND   incoming_payments.received_with_blob IS NOT NULL
) combined_payments
LEFT OUTER JOIN payments_metadata ON
    payments_metadata.type = combined_payments.type AND
    payments_metadata.id = combined_payments.id
ORDER BY combined_payments.created_at DESC
LIMIT :limit OFFSET :offset;

listAllPaymentsCount:
SELECT SUM(result) AS result FROM (
    SELECT COUNT(*) AS result FROM outgoing_payments
    UNION ALL
    SELECT COUNT(*) AS result FROM splice_outgoing_payments
    UNION ALL
    SELECT COUNT(*) AS result FROM channel_close_outgoing_payments
    UNION ALL
    SELECT COUNT(*) AS result FROM splice_cpfp_outgoing_payments
    UNION ALL
    SELECT COUNT(*) AS result FROM inbound_liquidity_outgoing_payments
    UNION ALL
    SELECT COUNT(*) AS result FROM incoming_payments WHERE received_at IS NOT NULL AND received_with_blob IS NOT NULL
);

listRecentPaymentsOrder:
SELECT
    combined_payments.type         AS type,
    combined_payments.id           AS id,
    combined_payments.created_at   AS created_at,
    combined_payments.completed_at AS completed_at,
    payments_metadata.modified_at  AS metadata_modified_at
FROM (
    SELECT
        2            AS type,
        id           AS id,
        created_at   AS created_at,
        completed_at AS completed_at
    FROM outgoing_payments
    WHERE completed_at IS NULL
UNION ALL
    SELECT
        2            AS type,
        id           AS id,
        created_at   AS created_at,
        completed_at AS completed_at
    FROM outgoing_payments
    WHERE completed_at >= :date
UNION ALL
    SELECT
        3            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM splice_outgoing_payments
    WHERE confirmed_at >= :date
UNION ALL
    SELECT
        4            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM channel_close_outgoing_payments
    WHERE confirmed_at >= :date
UNION ALL
    SELECT
        5            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM splice_cpfp_outgoing_payments
    WHERE confirmed_at >= :date
UNION ALL
    SELECT
        6            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at    AS completed_at
    FROM inbound_liquidity_outgoing_payments
    WHERE locked_at >= :date
UNION ALL
    SELECT
        1                        AS type,
        lower(hex(payment_hash)) AS id,
        created_at               AS created_at,
        received_at              AS completed_at
    FROM incoming_payments
    WHERE incoming_payments.received_at >= :date
    AND incoming_payments.received_with_blob IS NOT NULL
) combined_payments
LEFT OUTER JOIN payments_metadata ON
    payments_metadata.type = combined_payments.type AND
    payments_metadata.id = combined_payments.id
ORDER BY COALESCE(combined_payments.completed_at, combined_payments.created_at) DESC
LIMIT :limit OFFSET :offset;

listOutgoingInFlightPaymentsOrder:
SELECT
    combined_payments.type         AS type,
    combined_payments.id           AS id,
    combined_payments.created_at   AS created_at,
    combined_payments.completed_at AS completed_at,
    payments_metadata.modified_at  AS metadata_modified_at
FROM (
    SELECT
        2            AS type,
        id           AS id,
        created_at   AS created_at,
        completed_at AS completed_at
    FROM outgoing_payments AS combined_payments
    WHERE completed_at IS NULL
) combined_payments
LEFT OUTER JOIN payments_metadata ON
    payments_metadata.type = combined_payments.type AND
    payments_metadata.id = combined_payments.id
ORDER BY COALESCE(combined_payments.completed_at, combined_payments.created_at) DESC
LIMIT :limit OFFSET :offset;

listRangeSuccessfulPaymentsOrder:
SELECT
    combined_payments.type         AS type,
    combined_payments.id           AS id,
    combined_payments.created_at   AS created_at,
    combined_payments.completed_at AS completed_at,
    payments_metadata.modified_at  AS metadata_modified_at
FROM (
    SELECT
        2            AS type,
        id           AS id,
        created_at   AS created_at,
        completed_at AS completed_at
    FROM outgoing_payments
    WHERE outgoing_payments.status_type LIKE 'SUCCEEDED_%'
    AND   completed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        3            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM splice_outgoing_payments
    WHERE splice_outgoing_payments.confirmed_at IS NOT NULL
    AND   splice_outgoing_payments.confirmed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        4            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM channel_close_outgoing_payments
    WHERE channel_close_outgoing_payments.confirmed_at IS NOT NULL
    AND   channel_close_outgoing_payments.confirmed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        5            AS type,
        id           AS id,
        created_at   AS created_at,
        confirmed_at AS completed_at
    FROM splice_cpfp_outgoing_payments
    WHERE splice_cpfp_outgoing_payments.confirmed_at IS NOT NULL
    AND   splice_cpfp_outgoing_payments.confirmed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        6            AS type,
        id           AS id,
        created_at   AS created_at,
        locked_at    AS completed_at
    FROM inbound_liquidity_outgoing_payments
    WHERE inbound_liquidity_outgoing_payments.locked_at IS NOT NULL
    AND   inbound_liquidity_outgoing_payments.locked_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT
        1                        AS type,
        lower(hex(payment_hash)) AS id,
        created_at               AS created_at,
        received_at              AS completed_at
    FROM incoming_payments
    WHERE incoming_payments.received_at BETWEEN :startDate AND :endDate
    AND   incoming_payments.received_with_blob IS NOT NULL
) combined_payments
LEFT OUTER JOIN payments_metadata ON
    payments_metadata.type = combined_payments.type AND
    payments_metadata.id = combined_payments.id
ORDER BY COALESCE(combined_payments.completed_at, combined_payments.created_at) DESC
LIMIT :limit OFFSET :offset;

listRangeSuccessfulPaymentsCount:
SELECT SUM(result) AS result FROM (
    SELECT COUNT(*) AS result
    FROM outgoing_payments
    WHERE outgoing_payments.status_type LIKE 'SUCCEEDED_%'
    AND   completed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT COUNT(*) AS result
    FROM splice_outgoing_payments
    WHERE splice_outgoing_payments.confirmed_at IS NOT NULL
    AND   splice_outgoing_payments.confirmed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT COUNT(*) AS result
    FROM channel_close_outgoing_payments
    WHERE channel_close_outgoing_payments.confirmed_at IS NOT NULL
    AND   channel_close_outgoing_payments.confirmed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT COUNT(*) AS result
    FROM splice_cpfp_outgoing_payments
    WHERE splice_cpfp_outgoing_payments.confirmed_at IS NOT NULL
    AND   splice_cpfp_outgoing_payments.confirmed_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT COUNT(*) AS result
    FROM inbound_liquidity_outgoing_payments
    WHERE inbound_liquidity_outgoing_payments.locked_at IS NOT NULL
    AND   inbound_liquidity_outgoing_payments.locked_at BETWEEN :startDate AND :endDate
UNION ALL
    SELECT COUNT(*) AS result FROM incoming_payments
    WHERE incoming_payments.received_at BETWEEN :startDate AND :endDate
    AND   incoming_payments.received_with_blob IS NOT NULL
);