import fr.acinq.phoenix.db.payments.IncomingOriginTypeVersion;
import fr.acinq.phoenix.db.payments.IncomingReceivedWithTypeVersion;

-- incoming payments
CREATE TABLE IF NOT EXISTS incoming_payments (
    payment_hash BLOB NOT NULL PRIMARY KEY,
    preimage BLOB NOT NULL,
    created_at INTEGER NOT NULL,
    -- origin
    origin_type TEXT AS IncomingOriginTypeVersion NOT NULL,
    origin_blob BLOB NOT NULL,
    -- received
    received_amount_msat INTEGER DEFAULT NULL,
    received_at INTEGER DEFAULT NULL,
    -- received with
    received_with_type TEXT AS IncomingReceivedWithTypeVersion DEFAULT NULL,
    received_with_blob BLOB DEFAULT NULL,
    received_with_new_channel INTEGER DEFAULT 0
);

-- Create indexes to optimize the queries in AggregatedQueries.
-- Tip: Use "explain query plan" to ensure they're actually being used.
CREATE INDEX IF NOT EXISTS incoming_payments_filter_idx
    ON incoming_payments(received_at)
 WHERE received_at IS NOT NULL;

-- Used to find payments associated with new channels.
-- That is, to assist in mapping from a channel_id to the associated initial payment.
CREATE INDEX IF NOT EXISTS incoming_payments_new_channel_idx
    ON incoming_payments(created_at)
 WHERE received_with_new_channel = 1;

-- queries

insert:
INSERT INTO incoming_payments (
            payment_hash,
            preimage,
            created_at,
            origin_type,
            origin_blob)
VALUES (?, ?, ?, ?, ?);

updateReceived:
UPDATE incoming_payments
SET    received_at=?,
       received_with_type=?,
       received_with_blob=?,
       received_with_new_channel=?
WHERE  payment_hash = ?;

insertAndReceive:
INSERT INTO incoming_payments (
            payment_hash,
            preimage,
            created_at,
            origin_type, origin_blob,
            received_at,
            received_with_type,
            received_with_blob,
            received_with_new_channel)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

get:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
WHERE  payment_hash=?;

getOldestReceivedDate:
SELECT   received_at
FROM     incoming_payments AS r
WHERE    received_at IS NOT NULL
ORDER BY r.received_at ASC
LIMIT 1;

listAll:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
ORDER BY
       coalesce(received_at, created_at) DESC,
       payment_hash DESC
LIMIT :limit OFFSET :offset;

listAllWithin:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
WHERE  created_at BETWEEN :from AND :to
ORDER BY
       coalesce(received_at, created_at) DESC,
       payment_hash DESC;

listReceived:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments AS r
WHERE  received_at IS NOT NULL
ORDER BY
       r.received_at DESC,
       payment_hash DESC
LIMIT :limit OFFSET :offset;

listNewChannel:
SELECT   payment_hash, received_amount_msat, received_at, received_with_type, received_with_blob, origin_type
FROM     incoming_payments
WHERE    received_with_new_channel = 1
ORDER BY created_at DESC;

scanCompleted:
SELECT payment_hash,
       received_at
FROM   incoming_payments
WHERE  received_at IS NOT NULL;

delete:
DELETE FROM incoming_payments
WHERE payment_hash = ?;

-- use this in a `transaction` block to know how many rows were changed after an UPDATE
changes:
SELECT changes();
