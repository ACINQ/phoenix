import fr.acinq.phoenix.db.payments.IncomingOriginTypeVersion;
import fr.acinq.phoenix.db.payments.IncomingReceivedWithTypeVersion;

-- incoming payments
CREATE TABLE IF NOT EXISTS incoming_payments (
    payment_hash BLOB NOT NULL PRIMARY KEY,
    preimage BLOB NOT NULL,
    created_at INTEGER NOT NULL,
    -- origin
    origin_type TEXT AS IncomingOriginTypeVersion NOT NULL,
    origin_blob BLOB NOT NULL,
    -- received
    received_amount_msat INTEGER DEFAULT NULL,
    received_at INTEGER DEFAULT NULL,
    -- received with
    received_with_type TEXT AS IncomingReceivedWithTypeVersion DEFAULT NULL,
    received_with_blob BLOB DEFAULT NULL
);

-- The created_at column is used by AggregatedQueries.listAllPaymentsOrder for sorting.
-- And that query is used constantly by the app.
CREATE INDEX IF NOT EXISTS incoming_payments_created_at_idx ON incoming_payments(created_at);

-- The received_amount_msat column is used regularly as a filter within AggregatedQueries.
CREATE INDEX IF NOT EXISTS received_amount_msat_idx ON incoming_payments(received_amount_msat);

-- queries

hasIncomingPayment:
SELECT COUNT(*) FROM incoming_payments
WHERE payment_hash = ?;

insert:
INSERT INTO incoming_payments (
            payment_hash,
            preimage,
            created_at,
            origin_type,
            origin_blob)
VALUES (?, ?, ?, ?, ?);

updateReceived:
UPDATE incoming_payments
SET    received_at=?,
       received_with_type=?,
       received_with_blob=?
WHERE  payment_hash = ?;

insertAndReceive:
INSERT INTO incoming_payments (
            payment_hash,
            preimage,
            created_at,
            origin_type, origin_blob,
            received_at,
            received_with_type,
            received_with_blob)
VALUES (?, ?, ?, ?, ?, ?, ?, ?);

get:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
WHERE  payment_hash=?;

list:
SELECT payment_hash, preimage, created_at, origin_type, origin_blob, received_amount_msat, received_at, received_with_type, received_with_blob
FROM   incoming_payments
ORDER BY
       coalesce(received_at, created_at) DESC,
       payment_hash DESC
LIMIT :limit OFFSET :offset;

scanCompleted:
SELECT payment_hash,
       received_at
FROM   incoming_payments
WHERE  received_at IS NOT NULL;

delete:
DELETE FROM incoming_payments
WHERE payment_hash = ?;

-- use this in a `transaction` block to know how many rows were changed after an UPDATE
changes:
SELECT changes();
