import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS contacts (
     id TEXT NOT NULL PRIMARY KEY,
     name TEXT NOT NULL,
     photo_uri TEXT,
     use_offer_key INTEGER AS Boolean DEFAULT 1 NOT NULL,
     created_at INTEGER NOT NULL,
     updated_at INTEGER DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS contact_offers (
    offer_id BLOB NOT NULL PRIMARY KEY,
    contact_id TEXT NOT NULL,
    offer TEXT NOT NULL,
    created_at INTEGER NOT NULL,
    label TEXT,

    FOREIGN KEY(contact_id) REFERENCES contacts(id)
);

CREATE TABLE IF NOT EXISTS contact_addresses (
    address_hash BLOB NOT NULL PRIMARY KEY,
    contact_id TEXT NOT NULL,
    address TEXT NOT NULL,
    created_at INTEGER NOT NULL,
    label TEXT,

    FOREIGN KEY(contact_id) REFERENCES contacts(id)
);

CREATE INDEX contact_name_index ON contacts(name ASC);
CREATE INDEX contact_id_index ON contact_offers(contact_id);
CREATE INDEX contact_id_index2 ON contact_addresses(contact_id);

-- ########## table: contacts ##########

listContacts2:
SELECT *
FROM contacts
ORDER BY name ASC;

getContact2:
SELECT *
FROM contacts
WHERE id = :contactId;

scanContacts:
SELECT id, created_at FROM contacts;

existsContact:
SELECT COUNT(*) FROM contacts
WHERE id = ?;

insertContact:
INSERT INTO contacts(id, name, photo_uri, use_offer_key, created_at, updated_at)
VALUES (:id, :name, :photoUri, :useOfferKey, :createdAt, :updatedAt);

updateContact:
UPDATE contacts SET name=:name, photo_uri=:photoUri, use_offer_key=:useOfferKey, updated_at=:updatedAt
WHERE id=:contactId;

-- `contact.updated_at` should be incremented when a corresponding change is made
-- in `contact_offers` or `contact_addresses`
markContactUpdated:
UPDATE contacts
SET updated_at=:updatedAt
WHERE id=:contactId;

deleteContact:
DELETE FROM contacts WHERE id=:contactId;

-- ########## table: contact_offers ##########

listContactOffers:
SELECT *
FROM contact_offers;

listOffersForContact:
SELECT *
FROM contact_offers
WHERE contact_id=:contactId;

insertOfferForContact:
INSERT INTO contact_offers(offer_id, contact_id, offer, label, created_at)
VALUES (:offerId, :contactId, :offer, :label, :createdAt);

updateContactOffer:
UPDATE contact_offers
SET label=:label
WHERE offer_id=:offerId;

deleteContactOfferForOfferId:
DELETE FROM contact_offers WHERE offer_id=:offerId;

deleteContactOffersForContactId:
DELETE FROM contact_offers WHERE contact_id=:contactId;

-- ########## table: contact_addresses ##########

listContactAddresses:
SELECT *
FROM contact_addresses;

listAddressesForContact:
SELECT *
FROM contact_addresses
WHERE contact_id=:contactId;

insertAddressForContact:
INSERT INTO contact_addresses(address_hash, contact_id, address, label, created_at)
VALUES (:addressHash, :contactId, :address, :label, :createdAt);

updateContactAddress:
UPDATE contact_addresses
SET label=:label, address=:address
WHERE address_hash=:addressHash;

deleteContactAddressForAddressHash:
DELETE FROM contact_addresses WHERE address_hash=:addressHash;

deleteContactAddressesForContactId:
DELETE FROM contact_addresses WHERE contact_id=:contactId;
