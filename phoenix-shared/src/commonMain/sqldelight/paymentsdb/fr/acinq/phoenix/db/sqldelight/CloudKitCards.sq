-- This table stores the CKRecord metadata corresponding to a synced card.
-- * id => stores the primary key of the card row
--
CREATE TABLE IF NOT EXISTS cloudkit_cards_metadata (
    id TEXT NOT NULL PRIMARY KEY,
    record_creation INTEGER NOT NULL,
    record_blob BLOB NOT NULL
);

-- When resuming the download process (e.g. after app relaunch),
-- we need to fetch the earliest creationDate.
CREATE INDEX IF NOT EXISTS record_creation_idx
ON cloudkit_cards_metadata(record_creation);

-- This table stores the queue of items that need to be pushed to the cloud.
-- * rowid => because we might store the same `id` multiple times
-- * id => stores the primary key of the card row
--
CREATE TABLE IF NOT EXISTS cloudkit_cards_queue (
    rowid INTEGER PRIMARY KEY,
    id TEXT NOT NULL,
    date_added INTEGER NOT NULL
);

-- ########## cloudkit_cards_metadata ##########

addMetadata:
INSERT INTO cloudkit_cards_metadata (
            id,
            record_creation,
            record_blob)
VALUES (?, ?, ?);

updateMetadata:
UPDATE cloudkit_cards_metadata
SET    record_blob = ?
WHERE  id = ?;

existsMetadata:
SELECT COUNT(*) FROM cloudkit_cards_metadata
WHERE id = ?;

fetchMetadata:
SELECT * FROM cloudkit_cards_metadata
WHERE id = ?;

scanMetadata:
SELECT id FROM cloudkit_cards_metadata;

fetchOldestCreation_Cards:
SELECT id, record_creation FROM cloudkit_cards_metadata
ORDER BY record_creation ASC
LIMIT 1;

deleteMetadata:
DELETE FROM cloudkit_cards_metadata
WHERE id = ?;

deleteAllFromMetadata:
DELETE FROM cloudkit_cards_metadata;

-- ########## cloudkit_cards_queue ##########

addToQueue:
INSERT INTO cloudkit_cards_queue (
            id,
            date_added)
VALUES (?, ?);

fetchQueueBatch:
SELECT * FROM cloudkit_cards_queue
ORDER BY date_added ASC
LIMIT :limit;

fetchQueueCount:
SELECT COUNT(*) FROM cloudkit_cards_queue;

deleteFromQueue:
DELETE FROM cloudkit_cards_queue
WHERE rowid = ?;

deleteAllFromQueue:
DELETE FROM cloudkit_cards_queue;